name: Build svg and deploy on GitHub Releases
on:
  push:
    tags: '*'
    branches-ignore:
      - 'autodelivery**'
      - 'bump-**'
      - 'renovate/**'
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'renovate.json'
  pull_request:
  workflow_dispatch:

permissions: { }

jobs:
  setup-compile-deploy:
    permissions:
      contents: write
  compile:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    concurrency:
      group: release
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: generate pdf
        run: |
            sudo apt-get install inkscape
            inkscape --export-type=pdf *.svg
      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install
          npx semantic-release
      - name: Deploy
        if: inputs.publish-enable == 'true'
        env:
            GITHUB_TOKEN: ${{ inputs.token }}
        shell: bash
        run: |
            if [[ -z $GITHUB_TOKEN ]]; then
            echo "No token set, cannot deploy"
            false
            else
            if [[ $GITHUB_REF == 'refs/heads/master'
                || $GITHUB_REF == 'refs/heads/main'
                || $GITHUB_REF == 'refs/heads/default'
                || $GITHUB_REF == "refs/tags"*
            ]]; then
                TAG=$(git describe --tags --exact-match HEAD)
                echo "Preparing release $TAG"
                git tag --delete "$TAG"
                git tag "$TAG"
                git push --tags && echo "Tag $TAG successfully pushed" || true
                gh release create --notes-from-tag "$TAG" || true
                while IFS= read -r file; do
                pdf="${file%.*}.pdf"
                echo "Delivering file $pdf"
                gh release upload "$TAG" "$pdf" --clobber
                done <<< "$LATEX_SUCCESSES"
            else
                echo "Not running deployment from unknown source: $GITHUB_REF"
            fi
            fi